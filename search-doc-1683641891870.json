[{"title":"Getting Started","type":0,"sectionRef":"#","url":"/Sequence/docs/intro","content":"","keywords":""},{"title":"Wally Dependencies (Recommended)​","type":1,"pageTitle":"Getting Started","url":"/Sequence/docs/intro#wally-dependencies-recommended","content":"Wally is a quick way to get the packages you need! Wally is a package manager for Roblox created by, Uplift Games. This allows us to pull whatever package within the database at any time! You can install Wally here What now?​ You can now get to configuring your Wally files! Once you make sure Wally is installed on your computer. Run wally init in your terminal whilst within your project directory. Open up the file wally.toml to see the configuration settings for Wally. Then, under dependencies add the code Sequence = &quot;endarke/sequence@^0.*&quot;. Once you've added the package to your dependencies. You're gonna want to run wally install in your terminal. wally.toml should look something like this: [package] name = &quot;your_name_here/repository_name&quot; version = &quot;0.1.0&quot; registry = &quot;https://github.com/UpliftGames/wally-index&quot; realm = &quot;shared&quot; [dependencies] Sequence = &quot;endarke/sequence@^0.*&quot;  "},{"title":"Source​","type":1,"pageTitle":"Getting Started","url":"/Sequence/docs/intro#source","content":"If you don't have Wally or aren't too interested in using Wally, fear not! You are also able to download the latest version directly from the Sequence Repository here! "},{"title":"Examples","type":0,"sectionRef":"#","url":"/Sequence/docs/example","content":"","keywords":""},{"title":"Battle Turn Sequence​","type":1,"pageTitle":"Examples","url":"/Sequence/docs/example#battle-turn-sequence","content":"You can use the Sequence module to run a turn-based game for players or mobs! Feel free to sort it however you'd like, the possibilities are endless! local TurnSequence = Sequence.new({ Autotick = false }, function(playerAttacks: {}) for _, playerAttack in playerAttacks do -- Yield to perform player actions playerAttack() end end) -- Player 1 TurnSequence:Includes(function() PlayerService:CastSpell(&quot;Regeneration&quot;) end) -- Player 2 TurnSequence:Includes(function() PlayerService:Attack(&quot;Kobald&quot;) end) -- Player 3 TurnSequence:Includes(function() PlayerService:Move(&quot;Forward&quot;, 1) -- Maybe moves have higher priority than attacks? end) -- When it comes to player turn sequence TurnSequence:ForceTick()  "},{"title":"Round System​","type":1,"pageTitle":"Examples","url":"/Sequence/docs/example#round-system","content":"By turning off Autotick and ClearOnTick, we're able to call when we want our sequence to run. As well as, the functions don't get removed after being put through the tick cycle. This way, we can continue running the rounds recursively! You can also stop the round at anytime by using :Clean(). local currentRound = 1 local RoundSequence = Sequence.new({ Autotick = false, ClearOnTick = false }, function(roundSequence) for _, roundFunc in roundSequence do roundFunc(currentRound) end currentRound += 1 end) -- Intermission RoundSequence:Includes(function(currentRound) -- Notify intermission timer end) -- Start Round RoundSequence:Includes(function(currentRound) -- Teleport players into arena -- Spawn all weapons end) -- In-Game Match RoundSequence:Includes(function(currentRound) -- Listen for player attacks -- Notify match countdown timer end) -- Reward Players RoundSequence:Includes(function(currentRound) -- Give winner rewards end) -- Match End RoundSequence:Includes(function(currentRound) -- Restart the match! RoundSequence:ForceTick() end) RoundSequence:ForceTick()  "},{"title":"Compacting a Network Package​","type":1,"pageTitle":"Examples","url":"/Sequence/docs/example#compacting-a-network-package","content":"You can also successfully group tons of information that you'd like to send across to client(s)! local Package = Sequence.new({ Autotick = true }, function(packageLoad) PackageRemote:FireAllClients(packageLoad) end) Package:Includes(&quot;Purchase Success!&quot;) Package:Includes({ PetName = &quot;Dog&quot;, PetId = 3, })  "},{"title":"Sequence","type":0,"sectionRef":"#","url":"/Sequence/api/Sequence","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#types","content":" "},{"title":"void​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#void","content":"&lt;/&gt; type void = nil Commonly used term for a function that has no return value  "},{"title":"SequenceTable<T>​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#SequenceTable<T>","content":"&lt;/&gt; type SequenceTable&lt;T&gt; = {T} Used to hold all given objects  "},{"title":"Sequence<T>​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Sequence<T>","content":"&lt;/&gt; type Sequence&lt;T&gt; = metatable Object in which you run the Sequence code with "},{"title":"Properties​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#properties","content":" "},{"title":"Autotick​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Autotick","content":"true by default &lt;/&gt; Sequence.Autotick: boolean When enabled, it will automatically run a tick cycle on next resumption cycle  "},{"title":"ClearOnTick​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#ClearOnTick","content":"true by default &lt;/&gt; Sequence.ClearOnTick: boolean When enabled, SequenceTable&lt;T&gt; is cleared after the tick cycle has completed  "},{"title":"Limit​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Limit","content":"nil by default &lt;/&gt; Sequence.Limit: number When set to a number, SequenceTable won't allow any more objects than limit amount. If you :Include() an object that pushes SequenceTable&lt;T&gt; over the limit, it will remove any objects over said limit "},{"title":"Functions​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#new","content":"Sequence &lt;/&gt; Sequence.new( settings: {}, callback: function ) → Sequence&lt;T&gt; Creates a new Sequence object local MySequence = Sequence.new({ Autotick = true, ClearOnTick = true, Limit = 10 }, function(sequenceTable) for _, object in sequenceTable do print(&quot;Object &quot; .. object .. &quot; is in the sequence!&quot;) end end)   "},{"title":"Includes​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Includes","content":"&lt;/&gt; Sequence:Includes( object: T, index: number-- Places at the end of the sequence if nil ) → SequenceTable&lt;T&gt; Adds an object to the Sequence to be run on Sequence:ForceTick() local MySequence = Sequence.new({ Autotick = true }, function(sequenceTable) end) local currentSequence = MySequence:Includes(&quot;Hey there!&quot;) print(newSequence) &lt;Output&gt; { &quot;Hey there!&quot; }   "},{"title":"IncludeArray​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#IncludeArray","content":"&lt;/&gt; Sequence:IncludeArray( array: {T}, index: number-- Places at the end of the sequence if nil ) → () Bulk adds objects to the Sequence from an array to be run on Sequence:ForceTick() local MySequence = Sequence.new({ Autotick = true }, function(sequenceTable) print(sequencetable) end) local myTable = {&quot;I've been good!&quot;, &quot;What about you?&quot;} MySequence:Includes(&quot;Hey there!&quot;) MySequence:Includes(&quot;Nice to meet you!&quot;) MySequence:IncludeArray(myTable, 2) &lt;Output&gt; { &quot;Hey there!&quot;, &quot;I've been good!&quot;, &quot;What about you?&quot;, &quot;Nice to meet you!&quot; }   "},{"title":"Excludes​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Excludes","content":"&lt;/&gt; Sequence:Excludes(index: number) → T Removes an object from the Sequence at given index local MySequence = Sequence.new({ Autotick = true }, function(sequenceTable) end) MySequence:Includes(&quot;Hey there!&quot;) local removedObject = MySequence:Excludes(1) print(removedObject) &lt;Output&gt; Hey there!   "},{"title":"ExcludeFromObject​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#ExcludeFromObject","content":"&lt;/&gt; Sequence:ExcludeFromObject(object: T) → void Removes an object from the Sequence at given index local MySequence = Sequence.new({ Autotick = true }, function(sequenceTable) end) MySequence:Includes(&quot;Hey there!&quot;) print(MySequence:GetCurrentSequence()) MySequence:ExcludeFromObject(&quot;Hey there!&quot;) print(MySequence:GetCurrentSequence()) &lt;Output&gt; { &quot;Hey there!&quot; } {}   "},{"title":"Get​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Get","content":"&lt;/&gt; Sequence:Get(index: number) → T Used to find the object at index local MySequence = Sequence.new({ Autotick = true }, function(sequenceTable) end) MySequence:Includes(&quot;Hey there!&quot;) local foundObject = MySequence:Get(1) print(foundObject) &lt;Output&gt; Hey there!   "},{"title":"Set​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Set","content":"&lt;/&gt; Sequence:Set( object: T, index: number-- Sets object at index 1 if nil ) → SequenceTable&lt;T&gt; Adds object to sequence, but replaces any current value at given index local MySequence = Sequence.new({ Autotick = true }, function(sequenceTable) print(sequenceTable) end) MySequence:Includes(&quot;Hey there!&quot;) local currentSequence = MySequence:Set(&quot;Nice to meet you!&quot;, 1) &lt;Output&gt; { &quot;Nice to meet you!&quot; }   "},{"title":"GetCurrentSequence​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#GetCurrentSequence","content":"&lt;/&gt; Sequence:GetCurrentSequence() → SequenceTable&lt;T&gt; Returns current status of the SequenceTable&lt;T&gt; local MySequence = Sequence.new({ Autotick = false }, function(sequenceTable) end) MySequence:Set(&quot;Hey there!&quot;) local currentSequence = MySequence:GetCurrentSequence() print(currentSequence) &lt;Output&gt; { &quot;Hey there!&quot; }   "},{"title":"SetCurrentLimit​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#SetCurrentLimit","content":"&lt;/&gt; Sequence:SetCurrentLimit(amount: number) → void Changes the limit of objects that the SequenceTable&lt;T&gt; can hold local MySequence = Sequence.new({ Autotick = true, Limit = 1 }, function(sequenceTable) print(sequenceTable) end) MySequence:Includes(&quot;Hey there!&quot;) MySequence:Includes(&quot;Nice to meet you!&quot;, 1) MySequence:SetCurrentLimit(3) MySequence:Includes(&quot;I've been good!&quot;, 1) MySequence:Includes(&quot;What about you?&quot;) MySequence:Includes(&quot;Nothing much!&quot;, 2) -- Remember that :Includes() always places the object at the end. -- But inputting a number pushes all that are ahead of it, up! &lt;Output&gt; { &quot;I've been good!&quot;, &quot;Nothing much!&quot;, &quot;Nice to meet you!&quot; }   "},{"title":"Iterate​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Iterate","content":"&lt;/&gt; Sequence:Iterate(stopAt: number) → void Runs a tick cycle over objects from first till stopAt local MySequence = Sequence.new({ Autotick = false }, function(sequenceTable) print(sequenceTable) end) MySequence:Includes(&quot;Hey there!&quot;) MySequence:Includes(&quot;Nice to meet you!&quot;) MySequence:Includes(&quot;I've been good!&quot;) MySequence:Includes(&quot;What about you?&quot;) MySequence:Includes(&quot;Nothing much!&quot;) MySequence:Iterate(4) &lt;Output&gt; { &quot;Hey there!&quot;, &quot;Nice to meet you!&quot;, &quot;I've been good!&quot;, &quot;What about you?&quot; }   "},{"title":"ForceTick​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#ForceTick","content":"&lt;/&gt; Sequence:ForceTick() → void Forcefully runs a tick cycle through every sequence object local MySequence = Sequence.new({ Autotick = false }, function(sequenceTable) print(sequenceTable) end) MySequence:Includes(&quot;Hey there!&quot;) MySequence:Includes(&quot;Nice to meet you!&quot;) task.wait(10) MySequence:Includes(&quot;I've been good!&quot;) MySequence:ForceTick() &lt;Output&gt; { &quot;Hey there!&quot;, &quot;Nice to meet you!&quot;, &quot;I've been good!&quot; }   "},{"title":"Clean​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Clean","content":"&lt;/&gt; Sequence:Clean() → boolean Cleans up Sequence object and empties the SequenceTable&lt;T&gt; local MySequence = Sequence.new({ Autotick = false }, function(sequenceTable) end) MySequence:Includes(&quot;Hey there!&quot;) print(MySequence:GetCurrentSequence()) MySequence:Clean() print(MySequence:GetCurrentSequence()) &lt;Output&gt; { &quot;Hey there!&quot; } {}   "},{"title":"Destroy​","type":1,"pageTitle":"Sequence","url":"/Sequence/api/Sequence#Destroy","content":"&lt;/&gt; Sequence:Destroy() → void Destroys Sequence object permanently to never be restored "}]